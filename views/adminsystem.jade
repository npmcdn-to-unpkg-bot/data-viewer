doctype html
html
  head
   link(rel="stylesheet", href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")

   script(src="https://npmcdn.com/react@15.3.0/dist/react.js")
   script(src="https://npmcdn.com/react-dom@15.3.0/dist/react-dom.js")
   script(src="https://npmcdn.com/babel-core@5.8.38/browser.min.js")
   script(src="https://npmcdn.com/jquery@3.1.0/dist/jquery.min.js")
   script(src="https://npmcdn.com/remarkable@1.6.2/dist/remarkable.min.js")
   script(src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js")
   meta(charset="utf-8")
   meta(name="viewport" content="width=device-width, initial-scale=1")

  title Palvelun muokkaus
  link(rel='stylesheet', href='/stylesheets/style.css')
  body
   div(id="content" class="container-floating")
   script(type="text/babel").
    // SYSTEM DATA
    var SystemData = React.createClass({displayName: 'SystemData',    
    
    showError : function(errorTextToAdd) {this.setState({errorText : errorTextToAdd});},

    showMessage : function(msg) {this.setState({messageText: msg});
        $(".messageText").show();
    },

    loadSystem : function(id) {
        $.ajax({
        url : '/systemService/' + id,
        dataType: 'json',
        cache: false,
        timeout: 15000,
        success: function(data) {
            this.setState({name : data.name,
                            title : data.title,
                            notes : data.notes})
        }.bind(this),

        error: function(xhr, status, err) {
            this.showError('Tietosisällön haku epäonnistui.');
        }.bind(this)
        
      });//ajax             
    }, // loadSystem


    getInitialState: function() {
        return {
            name: '',
            title: '',
            notes: '',
            errorText : ' ',
            messageText : ' '
                };
        },

        componentDidMount: function() {
            if(this.props.id!='')
                this.loadSystem(this.props.id);
        },

        handleNameChange : function(e) {
            this.setState( { name : e.target.value});
        },

        handleTitleChange : function(e) {
            this.setState( { title : e.target.value});
        },

        handleNotesChange : function(e) {
            this.setState( { notes : e.target.value});
        },

        saveBasicData : function(e) {
            this.showError('');
            if(this.state.name.length<1) {
                this.showError('Nimi ei voi olla tyhjä');
                return;
            }
            var reqUrl = '/systemService/' + this.props.id;
            var reqType = 'PUT';
            if(this.props.id=='') {
                reqUrl = '/systemService/';
                reqType = 'POST';
            }
             $.ajax({
                url : reqUrl,
                type: reqType,
                dataType: 'json',
                cache: false,
                timeout: 15000,
                data: {
                    name: this.state.name,
                    title: this.state.title,
                    notes: this.state.notes},

                success: function(data) {
                    this.showMessage('Tiedot päivitetty.');
                    this.loadSystem(this.props.id);
                }.bind(this),

                error: function(xhr, status, err) {
                    this.showError('Päivitys epäonnistui.' + err + status + xhr.toString());
                }.bind(this)
            });//ajax             
        },

        render : function() {
            return (
                <div>
                  <div className="systemName">Palvelun muokkaus</div>
                  <div className="errorText">{this.state.errorText}</div>
                  <div className="messageText">{this.state.messageText}</div>
                  <div className="menuItem"> <a href="/admin/systems"> &lt;&lt; takaisin</a></div>
                  <form className="basicDataForm">
                    <div className="row">
                      <div className="col-sm-12 dataTitle">
                      PALVELUN PERUSTIEDOT
                      </div>
                    </div>
                    <div className="row">
                        <div className="col-sm-3 dataHeader">
                        Nimi
                        </div>
                        <div className="col-sm-6 dataEdit">
                            <input
                                    type="text"
                                    className="inputField"
                                    size="40"
                                    placeholder="Nimi"
                                    value={this.state.name}
                                    onChange={this.handleNameChange}
                                    />
                        </div>
                    </div>
                    <div className="row">
                        <div className="col-sm-3 dataHeader">
                        Otsikko
                        </div>
                        <div className="col-sm-6 dataEdit">
                            <input
                                    type="text"
                                    className="inputField"
                                    size="40"
                                    placeholder="Otsikko"
                                    value={this.state.title}
                                    onChange={this.handleTitleChange}
                                    />
                        </div>
                    </div>
                    <div className="row">
                        <div className="col-sm-3 dataHeader">
                        Kuvaus
                        </div>
                        <div className="col-sm-6 dataEdit">
                                <textarea
                                    name="Kuvaus"
                                    className="inputTextArea"
                                    value={this.state.notes}
                                    placeholder="Kuvaus palvelusta"
                                    onChange={this.handleNotesChange}
                                 />

                        </div>
                    </div>
                    <div className="row">
                      <div className="col-sm-3 dataHeader invisibleBg">
                        &nbsp;
                      </div>
                      <div className="col-sm-6 dataEdit" >
                        <button id="savebasicdata" type="button" className="btn btn-primary btn-sm" onClick={this.saveBasicData}>Tallenna perustiedot</button>
                      </div>
                    </div>
                  </form>
                  <MenuItemList systemid={this.props.id} />
                  <div className="menuItem"> <a href="/admin/systems"> &lt;&lt; takaisin</a></div>
                  </div>
            );
        }
    });

    // MENU ITEM
    var MenuItem = React.createClass({displayName: 'MenuItem',

        showInfo : function(itemToShow) {
            $('#info_'+itemToShow._id).toggle();
        },

        redirectToMenuItemEdit : function(itemToEdit) {
            window.location.href='/admin/menuitem/' + itemToEdit._id;    
        },

        deleteMenuItem : function(itemToDelete) {
            this.props.onDeleteMenuItem(itemToDelete);
        },

        render : function() {
            var identations = '';
            for(var j=0;j<this.props.item.identation;j++)
                identations += '\u00a0\u00a0\u00a0\u00a0';

            return (
                <div className="row">
                    <div className="col-sm-6 menuItem">
                        {identations + this.props.item.text}
                    </div>
                    <div className="col-sm-6 menuItem">
                      <button id="menuiteminfo" type="button" className="btn btn-info btn-sm" onClick={this.showInfo.bind(this, this.props.item) }>Tiedot</button>
                      &nbsp;
                      <button id="editmenuitem" type="button" className="btn btn-primary btn-sm" onClick={this.redirectToMenuItemEdit.bind(this, this.props.item) }>Muokkaa</button>
                      &nbsp;
                      <button id="deletemenuitem" type="button" className="btn btn-danger btn-sm" onClick={this.deleteMenuItem.bind(this, this.props.item) }>Poista</button>
                      &nbsp;
                      <br/>

                      <div id={'info_'+this.props.item._id} className = "infoBox" style={{display: 'none' }}>
                        <b>id</b> = {this.props.item._id}<br/>
                        <b>Sisennys</b> = {this.props.item.identation}<br/>
                        <b>Teksti</b> = {this.props.item.text}<br/>
                        <b>Toimintoja</b> = {this.props.item.functions.length + ' kpl'}<br/>
                      </div>
                    </div>
                </div>
            );
        }
    });

    // MENUITEM LIST
    var MenuItemList = React.createClass({displayName: 'MenuItemList',

    showError : function(errorTextToAdd) {
        this.setState({errorText : errorTextToAdd});
    },

    showMessage : function(msg) {
            this.setState({messageText: msg});
            $(".messageText").show();
    },

    loadMenuItems : function(systemid) {
        $.ajax({
            url : '/menuItemService/' + systemid,
            dataType: 'json',
            cache: false,
            timeout: 15000,

            success: function(data) {
                this.setState({items : data})
            }.bind(this),

            error: function(xhr, status, err) {
                this.showError('Tietosisällön haku epäonnistui.');
            }.bind(this)
        });//ajax             
    }, // loadMenuItems

    getInitialState: function() {
        return {
            items: [],
            messageText : '',
            errorText : ''
            };
    },

    componentDidMount: function() {
        if(this.props.systemid!='')
            this.loadMenuItems(this.props.systemid);
    },

    onDeleteMenuItem : function(menuItemToDelete) {
        if(confirm('VAROITUS!\nPoistetaanko valikon osa \"' + menuItemToDelete.text + '\"?\n' +
        'Samalla poistetaan kaikki valikon osan toiminnot.')) {
             $.ajax({
                url : ("/menuItemService/" + menuItemToDelete._id),
                type : 'DELETE',
                dataType: 'json',
                cache: false,
                timeout: 15000,                
                
                success: function(data) {
                    this.showMessage('Tiedot poistettu.');
                    this.loadMenuItems(this.props.systemid);
                }.bind(this),

                error: function(xhr, status, err) {
                    this.showError('Poisto  epäonnistui.');
                }.bind(this)

            });//ajax

        }
    },

    render : function() {
        var items = this.state.items.map(function(item) {
            return (
            <MenuItem key={item._id} item={item} onDeleteMenuItem={this.onDeleteMenuItem} />
            );
        }, this);
        return (
            <div>
                <div className="row">
                    <div className="col-sm-12 dataTitle">
                        { this.props.systemid=='' ? '' : 'PALVELUN VALIKKO'}
                    </div>
                <div className="errorText">{this.state.errorText}</div>
                <div className="messageText">{this.state.messageText}</div>
                </div>
                <div className="meuItemList">
                    {items}
                </div>
            </div>
        );
        }
    });

    ReactDOM.render(
        <SystemData id='#{systemId}'/>, 
        document.getElementById('content'));